fragment_downloaded_cb({"url": "building.html#extra-configuration-options", "fragment": "Extra Configuration Options \nIn addition to the normal options the configure script in the GLib library supports these additional arguments \nenable debug. \nTurns on various amounts of debugging support. Setting this to no disables g_assert g_return_if_fail g_return_val_if_fail and all cast checks between different object types. Setting it to minimum disables only cast checks. Setting it to yes enables runtime debugging. The default is minimum Note that no is fast but dangerous as it tends to destabilize even mostly bug free software by changing the effect of many bugs from simple warnings into fatal crashes. Thus enable debug no should not be used for stable releases of GLib. \ndisable gc friendly and enable gc friendly. \nBy default and with disable gc friendly as well Glib does not clear the memory for certain objects before they are freed. For example Glib may decide to recycle GList nodes by putting them in a free list. However memory profiling and debugging tools like Valgrind work better if an application does not keep dangling pointers to freed memory even though these pointers are no longer dereferenced or invalid pointers inside uninitialized memory. The enable gc friendly option makes Glib clear memory in these situations \nWhen shrinking a GArray Glib will clear the memory no longer available in the array shrink an array from bytes to and the last bytes will be cleared. This includes removals of single and multiple elements. \nWhen growing a GArray Glib will clear the new chunk of memory. Grow an array from bytes to bytes and the last bytes will be cleared. \nThe above applies to GPtrArray as well. \nWhen freeing a node from a GHashTable Glib will first clear the node which used to have pointers to the key and the value stored at that node. \nWhen destroying or removing a GTree node Glib will clear the node which used to have pointers to the node s value and the left and right subnodes. \nSince clearing the memory has a cost disable gc friendly is the default. \ndisable mem pools and enable mem pools. \nMany small chunks of memory are often allocated via collective pools in GLib and are cached after release to speed up reallocations. For sparse memory systems this behaviour is often inferior so memory pools can be disabled to avoid excessive caching and force atomic maintenance of chunks through the g_malloc and g_free functions. Code currently affected by this \nGMemChunks become basically non effective \nGSignal disables all caching potentially very slow \nGType doesn t honour the GTypeInfo n_preallocs field anymore \nthe GBSearchArray flag G_BSEARCH_ALIGN_POWER2 becomes non functional \nwith threads. \nSpecify a thread implementation to use. Available options are posix or win32 Normally configure should be able to work out the system threads API on its own. \ndisable regex and enable regex. \nDo not compile GLib with regular expression support. GLib will be smaller because it will not need the PCRE library. This is however not recommended as programs may need GRegex. \nwith pcre. \nSpecify whether to use the internal or the system supplied PCRE library. \ninternal means that GRegex will be compiled to use the internal PCRE library. \nsystem means that GRegex will be compiled to use the system supplied PCRE library. \nUsing the internal PCRE is the preferred solution \nSystem supplied PCRE has a separated copy of the big tables used for Unicode handling. \nSome systems have PCRE libraries compiled without some needed features such as UTF and Unicode support. \nPCRE uses some global variables for memory management and other features. In the rare case of a program using both GRegex and PCRE maybe indirectly through a library this variables could lead to problems when they are modified. \ndisable included printf and enable included printf. \nBy default the configure script will try to auto detect whether the C library provides a suitable set of printf functions. In detail configure checks that the semantics of snprintf are as specified by C99 and that positional parameters as specified in the Single Unix Specification are supported. If this not the case GLib will include an implementation of the printf family. \nThese options can be used to explicitly control whether an implementation of the printf family should be included or not. \ndisable Bsymbolic and enable Bsymbolic. \nBy default GLib uses the Bsymbolic functions linker flag to avoid intra library PLT jumps. A side effect of this is that it is no longer possible to override internal uses of GLib functions with LD_PRELOAD. Therefore it may make sense to turn this feature off in some situations. The disable Bsymbolic option allows to do that. \ndisable gtk doc and enable gtk doc. \nBy default the configure script will try to auto detect whether the gtk doc package is installed. If it is then it will use it to extract and build the documentation for the GLib library. These options can be used to explicitly control whether gtk doc should be used or not. If it is not used the distributed pre generated HTML files will be installed instead of building them on your machine. \ndisable man and enable man. \nBy default the configure script will try to auto detect whether xsltproc and the necessary Docbook stylesheets are installed. If they are then it will use them to rebuild the included man pages from the XML sources. These options can be used to explicitly control whether man pages should be rebuilt used or not. The distribution includes pre generated man pages. \ndisable xattr and enable xattr. \nBy default the configure script will try to auto detect whether the getxattr family of functions is available. If it is then extended attribute support will be included in GIO. These options can be used to explicitly control whether extended attribute support should be included or not. getxattr and friends can be provided by glibc or by the standalone libattr library. \ndisable selinux and enable selinux. \nBy default the configure script will auto detect if libselinux is available and include SELinux support in GIO if it is. These options can be used to explicitly control whether SELinux support should be included. \ndisable dtrace and enable dtrace. \nBy default the configure script will detect if DTrace support is available and use it. \ndisable systemtap and enable systemtap. \nThis option requires DTrace support. If it is available then the configure script will also check for the presence of SystemTap. \nenable coverage and disable coverage. \nEnable the generation of coverage reports for the GLib tests. This requires the lcov frontend to gcov from the Linux Test Project. To generate a coverage report use the lcov make target. The report is placed in the glib lcov directory. \nwith runtime libdir RELPATH. \nAllows specifying a relative path to where to install the runtime libraries meaning library files used for running not developing GLib applications This can be used in operating system setups where programs using GLib needs to run before e.g. usr is mounted. For example if LIBDIR is usr lib and lib is passed to with runtime libdir then the runtime libraries are installed into lib rather than usr lib. \nwith python. \nAllows specifying the Python interpreter to use either as an absolute path or as a program name. GLib can be built with Python at least version or Python \n"});