fragment_downloaded_cb({"url": "python/threads.html#glibrwlock", "fragment": "GLib.RWLock \nThe GRWLock struct is an opaque data structure to represent a reader writer lock. It is similar to a GMutex in that it allows multiple threads to coordinate access to a shared resource. \nThe difference to a mutex is that a reader writer lock discriminates between read only reader and full writer access. While only one thread at a time is allowed write access by holding the writer lock via GLib.RWLock.writer_lock multiple threads can gain simultaneous read only access by holding the reader lock via GLib.RWLock.reader_lock \nHere is an example for an array with access functions \nThis example shows an array which can be accessed by many readers the my_array_get function simultaneously whereas the writers the my_array_set function will only be allowed one at a time and only if no readers currently access the array. This is because of the potentially dangerous resizing of the array. Using these functions is fully multi thread safe now. \nIf a GLib.RWLock is allocated in static storage then it can be used without initialisation. Otherwise you should call GLib.RWLock.init on it and GLib.RWLock.clear when done. \nA GRWLock should only be accessed with the g_rw_lock_ functions. \n"});