fragment_downloaded_cb({"url": "python/spawn.html#glibspawn_async_with_pipes", "fragment": "GLib.spawn_async_with_pipes \nExecutes a child program asynchronously your program will not block waiting for the child to exit The child program is specified by the only argument that must be provided argv. argv should be a None terminated array of strings to be passed as the argument vector for the child. The first string in argv is of course the name of the program to execute. By default the name of the program must be a full path. If flags contains the GLib.SpawnFlags.search_path flag the PATH environment variable is used to search for the executable. If flags contains the GLib.SpawnFlags.search_path_from_envp flag the PATH variable from envp is used to search for the executable. If both the GLib.SpawnFlags.search_path and GLib.SpawnFlags.search_path_from_envp flags are set the PATH variable from envp takes precedence over the environment variable. \nIf the program name is not a full path and GLib.SpawnFlags.search_path flag is not used then the program will be run from the current directory or working_directory if specified this might be unexpected or even dangerous in some cases when the current directory is world writable. \nOn Windows note that all the string or string vector arguments to this function and the other g_spawn functions are in UTF the GLib file name encoding. Unicode characters that are not part of the system codepage passed in these arguments will be correctly available in the spawned program only if it uses wide character API to retrieve its command line. For C programs built with Microsoft s tools it is enough to make the program have a wmain instead of main. wmain has a wide character argument vector as parameter. \nAt least currently mingw doesn t support wmain so if you use mingw to develop the spawned program it should call g_win32_get_command_line to get arguments in UTF \nOn Windows the low level child process creation API CreateProcess doesn t use argument vectors but a command line. The C runtime library s spawn family of functions which GLib.spawn_async_with_pipes eventually calls paste the argument vector elements together into a command line and the C runtime startup code does a corresponding reconstruction of an argument vector from the command line to be passed to main. Complications arise when you have argument vector elements that contain spaces of double quotes. The spawn functions don t do any quoting or escaping but on the other hand the startup code does do unquoting and unescaping in order to enable receiving arguments with embedded spaces or double quotes. To work around this asymmetry GLib.spawn_async_with_pipes will do quoting and escaping on argument vector elements that need it before calling the C runtime spawn function. \nThe returned child_pid on Windows is a handle to the child process not its identifier. Process handles and process identifiers are different concepts on Windows. \nenvp is a None terminated array of strings where each string has the form KEY VALUE. This will become the child s environment. If envp is None the child inherits its parent s environment. \nflags should be the bitwise OR of any flags you want to affect the function s behaviour. The GLib.SpawnFlags.do_not_reap_child means that the child will not automatically be reaped you must use a child watch to be notified about the death of the child process. Eventually you must call GLib.spawn_close_pid on the child_pid in order to free resources which may be associated with the child process. On Unix using a child watch is equivalent to calling waitpid or handling the SIGCHLD signal manually. On Windows calling GLib.spawn_close_pid is equivalent to calling CloseHandle on the process handle returned in child_pid See g_child_watch_add not introspectable \nGLib.SpawnFlags.leave_descriptors_open means that the parent s open file descriptors will be inherited by the child otherwise all descriptors except stdin stdout stderr will be closed before calling exec in the child. GLib.SpawnFlags.search_path means that argv need not be an absolute path it will be looked for in the PATH environment variable. GLib.SpawnFlags.search_path_from_envp means need not be an absolute path it will be looked for in the PATH variable from envp. If both GLib.SpawnFlags.search_path and GLib.SpawnFlags.search_path_from_envp are used the value from envp takes precedence over the environment. GLib.SpawnFlags.stdout_to_dev_null means that the child s standard output will be discarded instead of going to the same location as the parent s standard output. If you use this flag standard_output must be None. GLib.SpawnFlags.stderr_to_dev_null means that the child s standard error will be discarded instead of going to the same location as the parent s standard error. If you use this flag standard_error must be None. GLib.SpawnFlags.child_inherits_stdin means that the child will inherit the parent s standard input by default the child s standard input is attached to dev null If you use this flag standard_input must be None. GLib.SpawnFlags.file_and_argv_zero means that the first element of argv is the file to execute while the remaining elements are the actual argument vector to pass to the file. Normally GLib.spawn_async_with_pipes uses argv as the file to execute and passes all of argv to the child. \nchild_setup and user_data are a function and user data. On POSIX platforms the function is called in the child after GLib has performed all the setup it plans to perform including creating pipes closing file descriptors etc. but before calling exec. That is child_setup is called just before calling exec in the child. Obviously actions taken in this function will only affect the child not the parent. \nOn Windows there is no separate fork and exec functionality. Child processes are created and run with a single API call CreateProcess. There is no sensible thing child_setup could be used for on Windows so it is ignored and not called. \nIf non NULL child_pid will on Unix be filled with the child s process ID. You can use the process ID to send signals to the child or to use g_child_watch_add not introspectable or waitpid if you specified the GLib.SpawnFlags.do_not_reap_child flag. On Windows child_pid will be filled with a handle to the child process only if you specified the GLib.SpawnFlags.do_not_reap_child flag. You can then access the child process using the Win32 API for example wait for its termination with the WaitFor functions or examine its exit code with GetExitCodeProcess. You should close the handle with CloseHandle or GLib.spawn_close_pid when you no longer need it. \nIf non NULL the standard_input standard_output standard_error locations will be filled with file descriptors for writing to the child s standard input or reading from its standard output or standard error. The caller of GLib.spawn_async_with_pipes must close these file descriptors when they are no longer in use. If these parameters are None the corresponding pipe won t be created. \nIf standard_input is NULL the child s standard input is attached to dev null unless GLib.SpawnFlags.child_inherits_stdin is set. \nIf standard_error is NULL the child s standard error goes to the same location as the parent s standard error unless GLib.SpawnFlags.stderr_to_dev_null is set. \nIf standard_output is NULL the child s standard output goes to the same location as the parent s standard output unless GLib.SpawnFlags.stdout_to_dev_null is set. \nerror can be None to ignore errors or non NULL to report errors. If an error is set the function returns False. Errors are reported even if they occur in the child for example if the executable in argv is not found Typically the message field of returned errors should be displayed to users. Possible errors are those from the G_SPAWN_ERROR not introspectable domain. \nIf an error occurs child_pid standard_input standard_output and standard_error will not be filled with valid values. \nIf child_pid is not None and an error does not occur then the returned process reference must be closed using GLib.spawn_close_pid. \nIf you are writing a GTK application and the program you are spawning is a graphical application too then you may want to use gdk_spawn_on_screen_with_pipes instead to ensure that the spawned program opens its windows on the right screen. \n"});