fragment_downloaded_cb({"url": "python/gregex.html#glibregexreplace", "fragment": "GLib.Regex.replace \nReplaces all occurrences of the pattern in regex with the replacement text. Backreferences of the form number or g in the replacement text are interpolated by the number th captured subexpression of the match g refers to the captured subexpression with the given name. refers to the complete match but followed by a number is the octal representation of a character. To include a literal in the replacement write \nThere are also escapes that changes the case of the following text \nIf you do not need to use backreferences use GLib.Regex.replace_literal. \nThe replacement string must be UTF encoded even if GLib.RegexCompileFlags.raw was passed to GLib.Regex.new. If you want to use not UTF encoded stings you can use GLib.Regex.replace_literal. \nSetting start_position differs from just passing over a shortened string and setting GLib.RegexMatchFlags.notbol in the case of a pattern that begins with any kind of lookbehind assertion such as b \n"});