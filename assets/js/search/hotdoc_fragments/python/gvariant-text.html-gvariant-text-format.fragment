fragment_downloaded_cb({"url": "python/gvariant-text.html#gvariant-text-format", "fragment": "GVariant Text Format \nThis page attempts to document the GVariant text format as produced by g_variant_print and parsed by the g_variant_parse family of functions. In most cases the style closely resembles the formatting of literals in Python but there are some additions and exceptions. \nThe functions that deal with GVariant text format absolutely always deal in utf Conceptually GVariant text format is a string of Unicode characters not bytes. Non ASCII but otherwise printable Unicode characters are not treated any differently from normal ASCII characters. \nThe parser makes two passes. The purpose of the first pass is to determine the type of the value being parsed. The second pass does the actual parsing. Based on the fact that all elements in an array have to have the same type GVariant is able to make some deductions that would not otherwise be possible. As an example \nis parsed as an array of arrays of integers type aai but \nis parsed as a array of arrays of doubles type aad \nAs another example GVariant is able to determine that \nis an array of maybe strings type ams \nWhat the parser accepts as valid input is dependent on context. The API permits for out of band type information to be supplied to the parser which will change its behaviour This can be seen in the GSettings and GDBus command line utilities where the type information is available from the schema or the remote introspection information. The additional information can cause parses to succeed when they would not otherwise have been able to by resolving ambiguous type information or can cause them to fail due to conflicting type information Unless stated otherwise the examples given in this section assume that no out of band type data has been given to the parser. \n"});