fragment_downloaded_cb({"url": "python/regex-syntax.html#lookbehind-assertions", "fragment": "Lookbehind assertions \nLookbehind assertions start with for positive assertions and for negative assertions. For example \ndoes find an occurrence of bar that is not preceded by foo The contents of a lookbehind assertion are restricted such that all the strings it matches must have a fixed length. However if there are several top level alternatives they do not all have to have the same fixed length. Thus \nis permitted but \ncauses an error at compile time. Branches that match different length strings are permitted only at the top level of a lookbehind assertion. An assertion such as \nis not permitted because its single top level branch can match two different lengths but it is acceptable if rewritten to use two top level branches \nThe implementation of lookbehind assertions is for each alternative to temporarily move the current position back by the fixed length and then try to match. If there are insufficient characters before the current position the assertion fails. \nGRegex does not allow the C escape which matches a single byte in UTF mode to appear in lookbehind assertions because it makes it impossible to calculate the length of the lookbehind. The X and R escapes which can match different numbers of bytes are also not permitted. \nPossessive quantifiers can be used in conjunction with lookbehind assertions to specify efficient matching at the end of the subject string. Consider a simple pattern such as \nwhen applied to a long string that does not match. Because matching proceeds from left to right GRegex will look for each a in the string and then see if what follows matches the rest of the pattern. If the pattern is specified as \nthe initial matches the entire string at first but when this fails because there is no following a it backtracks to match all but the last character then all but the last two characters and so on. Once again the search for a covers the entire string from right to left so we are no better off. However if the pattern is written as \nthere can be no backtracking for the item it can match only the entire string. The subsequent lookbehind assertion does a single test on the last four characters. If it fails the match fails immediately. For long strings this approach makes a significant difference to the processing time. \n"});