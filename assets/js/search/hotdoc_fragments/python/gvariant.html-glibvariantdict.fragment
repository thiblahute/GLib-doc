fragment_downloaded_cb({"url": "python/gvariant.html#glibvariantdict", "fragment": "GLib.VariantDict \nGLib.VariantDict is a mutable interface to GLib.Variant dictionaries. \nIt can be used for doing a sequence of dictionary lookups in an efficient way on an existing GLib.Variant dictionary or it can be used to construct new dictionaries with a hashtable like interface. It can also be used for taking existing dictionaries and modifying them in order to create new ones. \nGLib.VariantDict can only be used with G_VARIANT_TYPE_VARDICT not introspectable dictionaries. \nIt is possible to use GLib.VariantDict allocated on the stack or on the heap. When using a stack allocated GLib.VariantDict you begin with a call to g_variant_dict_init not introspectable and free the resources with a call to GLib.VariantDict.clear. \nHeap allocated GLib.VariantDict follows normal refcounting rules you allocate it with GLib.VariantDict.new and use GLib.VariantDict.ref and GLib.VariantDict.unref. \nGLib.VariantDict.end is used to convert the GLib.VariantDict back into a dictionary type GLib.Variant. When used with stack allocated instances this also implicitly frees all associated memory but for heap allocated instances you must still call GLib.VariantDict.unref afterwards. \nYou will typically want to use a heap allocated GLib.VariantDict when you expose it as part of an API. For most other uses the stack allocated form will be more convenient. \nConsider the following two examples that do the same thing in each style take an existing dictionary and look up the count uint32 key adding to it if it is found or returning an error if the key is not found. Each returns the new dictionary as a floating GLib.Variant. \n"});