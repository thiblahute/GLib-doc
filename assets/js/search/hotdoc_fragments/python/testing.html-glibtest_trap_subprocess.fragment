fragment_downloaded_cb({"url": "python/testing.html#glibtest_trap_subprocess", "fragment": "GLib.test_trap_subprocess \nRespawns the test program to run only test_path in a subprocess. This can be used for a test case that might not return or that might abort. \nIf test_path is None then the same test is re run in a subprocess. You can use GLib.test_subprocess to determine whether the test is in a subprocess or not. \ntest_path can also be the name of the parent test followed by subprocess and then a name for the specific subtest or just ending with subprocess if the test only has one child test tests with names of this form will automatically be skipped in the parent process. \nIf usec_timeout is non the test subprocess is aborted and considered failing if its run time exceeds it. \nThe subprocess behavior can be configured with the GLib.TestSubprocessFlags flags. \nYou can use methods such as g_test_trap_assert_passed not introspectable g_test_trap_assert_failed not introspectable and g_test_trap_assert_stderr not introspectable to check the results of the subprocess. But note that g_test_trap_assert_stdout not introspectable and g_test_trap_assert_stderr not introspectable cannot be used if test_flags specifies that the child should inherit the parent stdout stderr. \nIf your main needs to behave differently in the subprocess you can call GLib.test_subprocess after calling g_test_init not introspectable to see whether you are in a subprocess. \nThe following example tests that calling my_object_new will abort with an error message. \n"});