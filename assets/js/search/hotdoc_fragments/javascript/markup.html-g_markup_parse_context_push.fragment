fragment_downloaded_cb({"url": "javascript/markup.html#g_markup_parse_context_push", "fragment": "GLib.MarkupParseContext.prototype.push \nTemporarily redirects markup data to a sub parser. \nThis function may only be called from the start_element handler of a GLib.MarkupParser. It must be matched with a corresponding call to GLib.MarkupParseContext.prototype.pop in the matching end_element handler except in the case that the parser aborts due to an error \nAll tags text and other data between the matching tags is redirected to the subparser given by parser. user_data is used as the user_data for that parser. user_data is also passed to the error callback in the event that an error occurs. This includes errors that occur in subparsers of the subparser. \nThe end tag matching the start tag for which this call was made is handled by the previous parser which is given its own user_data which is why GLib.MarkupParseContext.prototype.pop is provided to allow one last access to the user_data provided to this function. In the case of error the user_data provided here is passed directly to the error callback of the subparser and GLib.MarkupParseContext.prototype.pop should not be called. In either case if user_data was allocated then it ought to be freed from both of these locations. \nThis function is not intended to be directly called by users interested in invoking subparsers. Instead it is intended to be used by the subparsers themselves to implement a higher level interface. \nAs an example see the following implementation of a simple parser that counts the number of tags encountered. \nIn order to allow this parser to be easily used as a subparser the following interface is provided \nThe subparser would then be used as follows \n"});