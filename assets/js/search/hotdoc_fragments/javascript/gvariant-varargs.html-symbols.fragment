fragment_downloaded_cb({"url": "javascript/gvariant-varargs.html#symbols", "fragment": "Symbols \nThe following table describes the rough meaning of symbols that may appear inside a GVariant format string. Each symbol is described in detail in its own section including usage examples. \nSymbol \nMeaning \nb y n q i u x t h d \nUsed for building or deconstructing boolean byte and numeric types. See Numeric Types below. \ns o g \nUsed for building or deconstructing string types. See Strings below. \nv \nUsed for building or deconstructing variant types. See Variants below. \na \nUsed for building or deconstructing arrays. See Arrays below. \nm \nUsed for building or deconstructing maybe types. See Maybe Types below. \n\nUsed for building or deconstructing tuples. See Tuples below. \n\nUsed for building or deconstructing dictionary entries. See Dictionaries below. \n\nUsed as a prefix for a GVariant type string not a prefix for a format string so as is a valid format string but as is not Denotes that a pointer to a GVariant should be used in place of the normal C type or types. For g_variant_new this means that you must pass a non NULL GVariant if it is a floating reference ownership will be taken as if by using g_variant_ref_sink For g_variant_get this means that you must pass a pointer to a GVariant for the value to be returned by reference or NULL to ignore the value. See GVariant below. \nr \nExactly equivalent to and r. Provided only for completeness so that all GVariant type strings can be used also as format strings. See GVariant below. \n\nUsed as a prefix for a GVariant type string not a prefix for a format string so s is a valid format string but s is not Denotes that a C pointer to serialised data should be used in place of the normal C type. See Pointers below. \n\nUsed as a prefix on some specific types of format strings. See Convenience Conversions below. \n"});