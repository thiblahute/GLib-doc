fragment_downloaded_cb({"url": "javascript/gvariant.html#glibvariantprototypetake_ref", "fragment": "GLib.Variant.prototype.take_ref \nIf value is floating sink it. Otherwise do nothing. \nTypically you want to use GLib.Variant.prototype.ref_sink in order to automatically do the correct thing with respect to floating or non floating references but there is one specific scenario where this function is helpful. \nThe situation where this function is helpful is when creating an API that allows the user to provide a callback function that returns a GLib.Variant. We certainly want to allow the user the flexibility to return a non floating reference from this callback for the case where the value that is being returned already exists \nAt the same time the style of the GLib.Variant API makes it likely that for newly created GLib.Variant instances the user can be saved some typing if they are allowed to return a GLib.Variant with a floating reference. \nUsing this function on the return value of the user s callback allows the user to do whichever is more convenient for them. The caller will alway receives exactly one full reference to the value either the one that was returned in the first place or a floating reference that has been converted to a full reference. \nThis function has an odd interaction when combined with GLib.Variant.prototype.ref_sink running at the same time in another thread on the same GLib.Variant instance. If GLib.Variant.prototype.ref_sink runs first then the result will be that the floating reference is converted to a hard reference. If GLib.Variant.prototype.take_ref runs first then the result will be that the floating reference is converted to a hard reference and an additional reference on top of that one is added. It is best to avoid this situation. \n"});