fragment_downloaded_cb({"url": "c/gvariant.html#struct-gvariantdict", "fragment": "struct GVariantDict \nGVariantDict is a mutable interface to GVariant dictionaries. \nIt can be used for doing a sequence of dictionary lookups in an efficient way on an existing GVariant dictionary or it can be used to construct new dictionaries with a hashtable like interface. It can also be used for taking existing dictionaries and modifying them in order to create new ones. \nGVariantDict can only be used with G_VARIANT_TYPE_VARDICT dictionaries. \nIt is possible to use GVariantDict allocated on the stack or on the heap. When using a stack allocated GVariantDict you begin with a call to g_variant_dict_init and free the resources with a call to g_variant_dict_clear. \nHeap allocated GVariantDict follows normal refcounting rules you allocate it with g_variant_dict_new and use g_variant_dict_ref and g_variant_dict_unref. \ng_variant_dict_end is used to convert the GVariantDict back into a dictionary type GVariant. When used with stack allocated instances this also implicitly frees all associated memory but for heap allocated instances you must still call g_variant_dict_unref afterwards. \nYou will typically want to use a heap allocated GVariantDict when you expose it as part of an API. For most other uses the stack allocated form will be more convenient. \nConsider the following two examples that do the same thing in each style take an existing dictionary and look up the count uint32 key adding to it if it is found or returning an error if the key is not found. Each returns the new dictionary as a floating GVariant. \n"});