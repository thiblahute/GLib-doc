fragment_downloaded_cb({"url": "c/running.html#environment-variables", "fragment": "Environment variables \nThe runtime behaviour of GLib applications can be influenced by a number of environment variables. \nStandard variables. \nGLib reads standard environment variables like LANG PATH HOME TMPDIR TZ and LOGNAME. \nXDG directories. \nGLib consults the environment variables XDG_DATA_HOME XDG_DATA_DIRS XDG_CONFIG_HOME XDG_CONFIG_DIRS XDG_CACHE_HOME and XDG_RUNTIME_DIR for the various XDG directories. For more information see the XDG basedir spec. \nG_FILENAME_ENCODING. \nThis environment variable can be set to a comma separated list of character set names. GLib assumes that filenames are encoded in the first character set from that list rather than in UTF The special token locale can be used to specify the character set for the current locale. \nG_BROKEN_FILENAMES. \nIf this environment variable is set GLib assumes that filenames are in the locale encoding rather than in UTF G_FILENAME_ENCODING takes priority over G_BROKEN_FILENAMES. \nG_MESSAGES_PREFIXED. \nA list of log levels for which messages should be prefixed by the program name and PID of the application. The default is to prefix everything except G_LOG_LEVEL_MESSAGE and G_LOG_LEVEL_INFO. The possible values are error warning critical message info and debug. You can also use the special values all and help. \nThis environment variable only affects the default log handler g_log_default_handler \nG_MESSAGES_DEBUG. \nA space separated list of log domains for which informational and debug messages should be printed. By default these messages are not printed. \nYou can also use the special value all. \nThis environment variable only affects the default log handler g_log_default_handler \nG_DEBUG. \nThis environment variable can be set to a list of debug options which cause GLib to print out different types of debugging information. \nfatal warnings Causes GLib to abort the program at the first call to g_warning or g_critical \nfatal criticals Causes GLib to abort the program at the first call to g_critical \ngc friendly Newly allocated memory that isn t directly initialized as well as memory being freed will be reset to The point here is to allow memory checkers and similar programs that use Boehm GC alike algorithms to produce more accurate results. \nresident modules All modules loaded by GModule will be made resident. This can be useful for tracking memory leaks in modules which are later unloaded but it can also hide bugs where code is accessed after the module would have normally been unloaded. \nbind now modules All modules loaded by GModule will bind their symbols at load time even when the code uses G_MODULE_BIND_LAZY. \nThe special value all can be used to turn on all debug options. The special value help can be used to print all available options. \nG_SLICE. \nThis environment variable allows reconfiguration of the GSlice memory allocator. \nalways malloc This will cause all slices allocated through g_slice_alloc and released by g_slice_free1 to be actually allocated via direct calls to g_malloc and g_free This is most useful for memory checkers and similar programs that use Boehm GC alike algorithms to produce more accurate results. It can also be in conjunction with debugging features of the system s malloc implementation such as glibc s MALLOC_CHECK_ to debug erroneous slice allocation code although debug blocks is usually a better suited debugging tool. \ndebug blocks Using this option present since GLib engages extra code which performs sanity checks on the released memory slices. Invalid slice addresses or slice sizes will be reported and lead to a program halt. This option is for debugging scenarios. In particular client packages sporting their own test suite should always enable this option when running tests. Global slice validation is ensured by storing size and address information for each allocated chunk and maintaining a global hash table of that data. That way multi thread scalability is given up and memory consumption is increased. However the resulting code usually performs acceptably well possibly better than with comparable memory checking carried out using external tools. \nAn example of a memory corruption scenario that cannot be reproduced with G_SLICE always malloc but will be caught by G_SLICE debug blocks is as follows \nThe special value all can be used to turn on all options. The special value help can be used to print all available options. \nG_RANDOM_VERSION. \nIf this environment variable is set to the outdated pseudo random number seeding and generation algorithms from GLib are used instead of the newer better ones. You should only set this variable if you have sequences of numbers that were generated with Glib that you need to reproduce exactly. \nLIBCHARSET_ALIAS_DIR. \nAllows to specify a nonstandard location for the charset.aliases file that is used by the character set conversion routines. The default location is the libdir specified at compilation time. \nTZDIR. \nAllows to specify a nonstandard location for the timezone data files that are used by the GDateTime API. The default location is under usr share zoneinfo. For more information also look at the tzset manual page. \n"});