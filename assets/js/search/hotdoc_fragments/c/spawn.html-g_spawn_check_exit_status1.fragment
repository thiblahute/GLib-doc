fragment_downloaded_cb({"url": "c/spawn.html#g_spawn_check_exit_status1", "fragment": "g_spawn_check_exit_status \nSet error if exit_status indicates the child exited abnormally e.g. with a nonzero exit code or via a fatal signal \nThe g_spawn_sync and g_child_watch_add family of APIs return an exit status for subprocesses encoded in a platform specific way. On Unix this is guaranteed to be in the same format waitpid returns and on Windows it is guaranteed to be the result of GetExitCodeProcess. \nPrior to the introduction of this function in GLib interpreting exit_status required use of platform specific APIs which is problematic for software using GLib as a cross platform layer. \nAdditionally many programs simply want to determine whether or not the child exited successfully and either propagate a GError or print a message to standard error. In that common case this function can be used. Note that the error message in error will contain human readable information about the exit status. \nThe domain and code of error have special semantics in the case where the process has an exit code as opposed to being killed by a signal. On Unix this happens if WIFEXITED would be true of exit_status. On Windows it is always the case. \nThe special semantics are that the actual exit code will be the code set in error and the domain will be G_SPAWN_EXIT_ERROR. This allows you to differentiate between different exit codes. \nIf the process was terminated by some means other than an exit status the domain will be G_SPAWN_ERROR and the code will be G_SPAWN_ERROR_FAILED. \nThis function just offers convenience you can of course also check the available platform via a macro such as G_OS_UNIX and use WIFEXITED and WEXITSTATUS on exit_status directly. Do not attempt to scan or parse the error message string it may be translated and or change in future versions of GLib. \n"});