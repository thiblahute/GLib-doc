fragment_downloaded_cb({"url": "c/main.html#g_timeout_add_full1", "fragment": "g_timeout_add_full \nSets a function to be called at regular intervals with the given priority. The function is called repeatedly until it returns FALSE at which point the timeout is automatically destroyed and the function will not be called again. The notify function is called when the timeout is destroyed. The first call to the function will be at the end of the first interval. \nNote that timeout functions may be delayed due to the processing of other event sources. Thus they should not be relied on for precise timing. After each call to the timeout function the time of the next timeout is recalculated based on the current time and the given interval it does not try to catch up time lost in delays \nSee memory management of sources mainloop memory management for details on how to handle the return value and memory management of data. \nThis internally creates a main loop source using g_timeout_source_new and attaches it to the global GMainContext using g_source_attach so the callback will be invoked in whichever thread is running that main context. You can do these steps manually if you need greater control or to use a custom main context. \nThe interval given in terms of monotonic time not wall clock time. See g_get_monotonic_time. \n"});