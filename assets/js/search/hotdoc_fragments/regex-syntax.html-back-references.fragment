fragment_downloaded_cb({"url": "regex-syntax.html#back-references", "fragment": "Back references \nOutside a character class a backslash followed by a digit greater than and possibly further digits is a back reference to a capturing subpattern earlier that is to its left in the pattern provided there have been that many previous capturing left parentheses. \nHowever if the decimal number following the backslash is less than it is always taken as a back reference and causes an error only if there are not that many capturing left parentheses in the entire pattern. In other words the parentheses that are referenced need not be to the left of the reference for numbers less than A forward back reference of this type can make sense when a repetition is involved and the subpattern to the right has participated in an earlier iteration. \nIt is not possible to have a numerical forward back reference to subpattern whose number is or more using this syntax because a sequence such as e50 is interpreted as a character defined in octal. See the subsection entitled Non printing characters above for further details of the handling of digits following a backslash. There is no such problem when named parentheses are used. A back reference to any subpattern is possible using named parentheses see below \nAnother way of avoiding the ambiguity inherent in the use of digits following a backslash is to use the g escape sequence introduced in Perl This escape must be followed by a positive or a negative number optionally enclosed in braces. \nA positive number specifies an absolute reference without the ambiguity that is present in the older syntax. It is also useful when literal digits follow the reference. A negative number is a relative reference. Consider abc def ghi g the sequence g is a reference to the most recently started capturing subpattern before g that is is it equivalent to Similarly g would be equivalent to The use of relative references can be helpful in long patterns and also in patterns that are created by joining together fragments that contain references within themselves. \nA back reference matches whatever actually matched the capturing subpattern in the current string rather than anything matching the subpattern itself see Subpatterns as subroutines below for a way of doing that So the pattern \nmatches sense and sensibility and response and responsibility but not sense and responsibility If caseful matching is in force at the time of the back reference the case of letters is relevant. For example \nmatches rah rah and RAH RAH but not RAH rah even though the original capturing subpattern is matched caselessly. \nBack references to named subpatterns use the Perl syntax k name or k name or the Python syntax P name We could rewrite the above example in either of the following ways \nA subpattern that is referenced by name may appear in the pattern before or after the reference. \nThere may be more than one back reference to the same subpattern. If a subpattern has not actually been used in a particular match any back references to it always fail. For example the pattern \nalways fails if it starts to match a rather than bc Because there may be many capturing parentheses in a pattern all digits following the backslash are taken as part of a potential back reference number. If the pattern continues with a digit character some delimiter must be used to terminate the back reference. If the G_REGEX_EXTENDED flag is set this can be whitespace. Otherwise an empty comment see Comments below can be used. \nA back reference that occurs inside the parentheses to which it refers fails when the subpattern is first used so for example a never matches. However such references can be useful inside repeated subpatterns. For example the pattern \nmatches any number of a s and also aba ababbaa etc. At each iteration of the subpattern the back reference matches the character string corresponding to the previous iteration. In order for this to work the pattern must be such that the first iteration does not need to match the back reference. This can be done using alternation as in the example above or by a quantifier with a minimum of zero. \n"});