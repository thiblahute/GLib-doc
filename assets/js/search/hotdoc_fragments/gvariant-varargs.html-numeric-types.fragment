fragment_downloaded_cb({"url": "gvariant-varargs.html#numeric-types", "fragment": "Numeric Types \nCharacters b y n q i u x t h d \nVariable argument conversions from numeric types work in the most obvious way possible. Upon encountering one of these characters g_variant_new takes the equivalent C type as an argument. g_variant_get takes a pointer to the equivalent C type or NULL to ignore the value \nThe equivalent C types are as follows \nCharacter \nEquivalent C type \nb \ngboolean \ny \nguchar \nn \ngint16 \nq \nguint16 \ni \ngint32 \nu \nguint32 \nx \ngint64 \nt \nguint64 \nh \ngint32 \nd \ngdouble \nNote that in C small integer types in variable argument lists are promoted up to int or unsigned int as appropriate and read back accordingly. int is bits on every platform on which GLib is currently supported. This means that you can use C expressions of type int with g_variant_new and format characters b y n q i u and h Specifically you can use integer literals with these characters. \nWhen using the x and t characters you must ensure that the value that you provide is bit. This means that you should use a cast or make use of the G_GINT64_CONSTANT or G_GUINT64_CONSTANT macros. \nNo type promotion occurs when using g_variant_get since it operates with pointers. The pointers must always point to a memory region of exactly the correct size. \n"});