fragment_downloaded_cb({"url": "regex-syntax.html#named-subpatterns", "fragment": "Named subpatterns \nIdentifying capturing parentheses by number is simple but it can be very hard to keep track of the numbers in complicated regular expressions. Furthermore if an expression is modified the numbers may change. To help with this difficulty GRegex supports the naming of subpatterns. A subpattern can be named in one of three ways name or name as in Perl or P name as in Python. References to capturing parentheses from other parts of the pattern such as backreferences recursion and conditions can be made by name as well as by number. \nNames consist of up to alphanumeric characters and underscores. Named capturing parentheses are still allocated numbers as well as names exactly as if the names were not present. By default a name must be unique within a pattern but it is possible to relax this constraint by setting the G_REGEX_DUPNAMES option at compile time. This can be useful for patterns where only one instance of the named parentheses can match. Suppose you want to match the name of a weekday either as a letter abbreviation or as the full name and in both cases you want to extract the abbreviation. This pattern ignoring the line breaks does the job \nThere are five capturing substrings but only one is ever set after a match. The function for extracting the data by name returns the substring for the first and in this example the only subpattern of that name that matched. This saves searching to find which numbered subpattern it was. If you make a reference to a non unique named subpattern from elsewhere in the pattern the one that corresponds to the lowest number is used. \n"});